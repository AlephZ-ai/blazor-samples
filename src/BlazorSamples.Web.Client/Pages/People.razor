@using BlazorSamples.Shared
@page "/people"
@attribute [StreamRendering]
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject ApiClient Api

<PageTitle>People</PageTitle>

<h1>People</h1>

<p>This component demonstrates showing list.</p>

@if (people is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <td><NavLink class="btn btn-primary" href="/edit-person">Add</NavLink></td>
    <td><NavLink class="btn btn-primary" href="@($"/people?page={CurrentPage + 1}&sort={CurrentSort}")">Next</NavLink></td>
    <td><NavLink class="btn btn-primary" href="@($"/people?page={CurrentPage - 1}&sort={CurrentSort}")">Previous</NavLink></td>
    <table class="table">
        <thead>
            <tr>
                <th><NavLink class="link-primary" href="/people?sort=first">First</NavLink></th>
                <th><NavLink class="link-primary" href="/people?sort=last">Last</NavLink></th>
                <th><NavLink class="link-primary" href="/people?sort=age">Age</NavLink></th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                    <td>@person.Age?.ToString(CultureInfo.InvariantCulture)</td>
                    <td><NavLink class="btn btn-primary" href="@($"/edit-person/{person.Id!.Value}")">Edit</NavLink></td>
                    <td><button class="btn btn-danger" @onclick="() => Delete(person.Id!.Value)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? CurrentPage { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "sort")]
    public string? CurrentSort { get; set; }
    private const int pageSize = 10;
    private Person[]? people;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(0);
        await LoadAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        return LoadAsync();
    }

    private async Task LoadAsync()
    {
        CurrentPage ??= 1;
        people = await Api.GetPeopleAsync(CurrentPage!.Value, pageSize, CurrentSort);
    }

    private async Task Delete(int id)
    {
        await Api.DeletePersonAsync(id);
        people = await Api.GetPeopleAsync(CurrentPage!.Value, pageSize, CurrentSort);
    }
}
