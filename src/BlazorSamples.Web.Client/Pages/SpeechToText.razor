@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSamples.Shared
@using BlazorSamples.Shared.Clients
@using BlazorSamples.Shared.SpeechRecognition.Vosk
@using BlazorSamples.Shared.UI
@page "/speech-to-text"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@implements ISpeechToTextClient
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Speech to Text</PageTitle>

<h1>Speech to Text</h1>

<p>This component demonstrates speech to text.</p>

<button disabled="@IsStartRecordingButtonDisabled" class="btn btn-primary" @onclick="StartRecording">Start
    Recording</button>
<button disabled="@IsStopRecordingButtonDisabled" class="btn btn-primary" @onclick="StopRecording">Stop
    Recording</button>
<p>@Status</p>
<p>mime: @mimeType</p>
<p>Bytes: @bytesRecorded</p>

<h5>Input Devices</h5>
<button class="btn btn-primary" @onclick="RefreshDevices">Refresh Audio Input Devices</button>
<InputSelect disabled="@IsDeviceSelectionDisabled" @bind-Value="selectedDeviceId">
    @foreach (var device in AudioInputDevices)
    {
        <option value="@device.DeviceId">@device.Label</option>
    }
</InputSelect>

@if (results.Count > 0)
{
    <div>
    <h5>Regular Results</h5>
    @foreach (var item in results)
        {
            <p>@item</p>
        }
    </div>
}

<p>Result: @result</p>
@if (!string.IsNullOrWhiteSpace(finalResult))
{
    <p>Final Result: @finalResult</p>
}

@code {
    private int bytesRecorded = 0;
    private string? selectedDeviceId;
    private List<BrowserMediaDevice> AudioInputDevices = new List<BrowserMediaDevice>();
    private bool disableButtons = false;
    private bool isRecording = false;
    private string Status => isRecording ? "Recording" : "Ready";
    private bool HasAudioInputDevices => AudioInputDevices.Count != 0;
    private bool IsStartRecordingButtonDisabled => disableButtons || !HasAudioInputDevices || isRecording;
    private bool IsStopRecordingButtonDisabled => disableButtons || !HasAudioInputDevices || !isRecording;
    private bool IsDeviceSelectionDisabled => IsStartRecordingButtonDisabled;
    private string mimeType = default!;
    private BufferPosition bufferPosition = BufferPosition.First;
    private DotNetObjectReference<SpeechToText> thisJS = default!;
    private IJSObjectReference module = default!;
    private HubConnection? hub;
    private List<string> results = new List<string>();
    private string? result;
    private string? finalResult;

    protected override void OnInitialized()
    {
        thisJS = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/app.js");
            await RefreshDevices();
            StateHasChanged();
        }
    }

    async Task StartRecording()
    {
        if (!isRecording)
        {
            bytesRecorded = 0;
            disableButtons = true;
            results = new List<string>();
            result = string.Empty;
            finalResult = null;
            bufferPosition = BufferPosition.First;
            StateHasChanged();

            await CheckConnection();
            mimeType = await module.InvokeAsync<string>("startRecording", thisJS, selectedDeviceId);
            isRecording = true;
            disableButtons = false;
        }
    }

    async Task StopRecording()
    {
        if (isRecording)
        {
            disableButtons = true;
            bufferPosition = BufferPosition.Last;
            StateHasChanged();
            await module.InvokeVoidAsync("stopRecording", thisJS);
        }
    }

    async Task RefreshDevices()
    {
        if (await module.InvokeAsync<bool>("requestMicrophonePermission"))
        {
            var devices = await module.InvokeAsync<List<BrowserMediaDevice>>("getAudioInputDevices") ?? new();
            devices = devices.Where(device => !string.IsNullOrWhiteSpace(device.DeviceId)).ToList();
            AudioInputDevices = devices ?? new List<BrowserMediaDevice>();
            StateHasChanged();
        }
    }

    public Task ReceiveResult(RegularResult message)
    {
        this.results.Add(message.text!);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ReceivePartialResult(PartialResult message)
    {
        this.result = message.partial;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ReceiveFinalResult(FinalResult message)
    {
        this.finalResult = message.text;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task RecordingStopped()
    {
        isRecording = false;
        disableButtons = false;
        StateHasChanged();
        if (hub is not null)
        {
            await hub.DisposeAsync();
            hub = null;
        }
    }

    [JSInvokable]
    public async Task DataAvailable(byte[] buffer, string mimeType)
    {
        bytesRecorded += buffer.Length;
        await CheckConnection();
        if (hub is not null)
        {
            await hub.SendAsync("ProcessAudioBuffer", buffer, bufferPosition, mimeType);
        }

        if (bufferPosition == BufferPosition.First)
            bufferPosition = BufferPosition.Middle;

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await StopRecording();
        if (hub is not null)
        {
            await hub.DisposeAsync();
            hub = null;
        }

        await module.DisposeAsync();
        thisJS.Dispose();
    }

    private async Task CheckConnection()
    {
        if (hub is null)
        {
            hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/speechtotext"))
            .Build();

            hub.On<RegularResult>("ReceiveResult", ReceiveResult);
            hub.On<PartialResult>("ReceivePartialResult", ReceivePartialResult);
            hub.On<FinalResult>("ReceiveFinalResult", ReceiveFinalResult);
        }

        if (hub.State != HubConnectionState.Connected)
            await hub.StartAsync();
    }
}
