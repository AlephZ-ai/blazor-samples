@using BlazorFileSaver
@page "/audio-recorder"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IBlazorFileSaver BlazorFileSaver

<PageTitle>Audio Recorder</PageTitle>

<h1>Audio Recorder</h1>

<p>This component demonstrates audio recording and saving.</p>

<button disabled="@IsStartRecordingButtonDisabled" class="btn btn-primary" @onclick="StartRecording">Start
    Recording</button>
<button disabled="@IsStopRecordingButtonDisabled" class="btn btn-primary" @onclick="StopRecording">Stop
    Recording</button>
<p>@Status</p>
<p>mime: @mimeType</p>
<p>Bytes: @bytesRecorded</p>

<h5>Input Devices</h5>
<button class="btn btn-primary" @onclick="RefreshDevices">Refresh Audio Input Devices</button>
<InputSelect disabled="@IsDeviceSelectionDisabled" @bind-Value="selectedDeviceId">
    @foreach (var device in AudioInputDevices)
    {
        <option value="@device.DeviceId">@device.Label</option>
    }
</InputSelect>

@code {
    private string fileName = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @"\temp.tmp";
    private FileStream? fileStream;
    private int bytesRecorded = 0;
    private string? selectedDeviceId;
    private List<BrowserMediaDevice> AudioInputDevices = new List<BrowserMediaDevice>();
    private bool disableButtons = false;
    private bool isRecording = false;
    private string Status => isRecording ? "Recording" : "Ready";
    private bool HasAudioInputDevices => AudioInputDevices.Count != 0;
    private bool IsStartRecordingButtonDisabled => disableButtons || !HasAudioInputDevices || isRecording;
    private bool IsStopRecordingButtonDisabled => disableButtons || !HasAudioInputDevices || !isRecording;
    private bool IsDeviceSelectionDisabled => IsStartRecordingButtonDisabled;
    private string mimeType = default!;
    private DotNetObjectReference<AudioRecorder> thisJS = default!;
    private IJSObjectReference module = default!;

    protected override void OnInitialized()
    {
        thisJS = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/app.js");
            await RefreshDevices();
            StateHasChanged();
        }
    }

    async Task StartRecording()
    {
        if (!isRecording)
        {
            disableButtons = true;
            StateHasChanged();

            bytesRecorded = 0;
            if (File.Exists(fileName))
                File.Delete(fileName);

            fileStream = File.OpenWrite(fileName);
            mimeType = await module.InvokeAsync<string>("startRecording", thisJS, selectedDeviceId);
            isRecording = true;
            disableButtons = false;
        }
    }

    async Task StopRecording()
    {
        if (isRecording)
        {
            disableButtons = true;
            StateHasChanged();
            await module.InvokeVoidAsync("stopRecording", thisJS);
        }
    }

    async Task RefreshDevices()
    {
        if (await module.InvokeAsync<bool>("requestMicrophonePermission"))
        {
            var devices = await module.InvokeAsync<List<BrowserMediaDevice>>("getAudioInputDevices") ?? new();
            devices = devices.Where(device => device is not null && device.DeviceId is not null).ToList();
            AudioInputDevices = devices ?? new List<BrowserMediaDevice>();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task RecordingStopped()
    {
        isRecording = false;
        disableButtons = false;
        StateHasChanged();
        if (fileStream is not null)
        {
            fileStream.Close();
            fileStream.Dispose();
            fileStream = null;
            var bytes = await File.ReadAllBytesAsync(fileName);
            await BlazorFileSaver.SaveAsBase64($"recorded.{mimeType.Substring(6)}", Convert.ToBase64String(bytes), mimeType);
        }
    }

    [JSInvokable]
    public async Task DataAvailable(byte[] buffer, string mimeType)
    {
        if (fileStream is not null)
        {
            await fileStream.WriteAsync(buffer, 0, buffer.Length);
            bytesRecorded += buffer.Length;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopRecording();
        thisJS.Dispose();
        await module.DisposeAsync();
    }
}
