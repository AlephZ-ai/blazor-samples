@using System.Threading.Channels
@using Microsoft.AspNetCore.SignalR.Client
@using Grpc.Core
@using BlazorSamples.Shared
@using BlazorSamples.Shared.SpeechRecognition.Vosk
@using BlazorSamples.Shared.UI
@using BlazorSamples.Shared.Clients
@using BlazorSamples.PlayHT.Protos.V1
@page "/voice-chat"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@implements ISpeechToTextClient
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ApiClient Api
@inject Tts.TtsClient client

<PageTitle>Voice Chat</PageTitle>

<h1>Voice Chat</h1>

<p>This component demonstrates voice chat.</p>

<div>
    <audio id="audioElement" controls></audio>
</div>

<div>
    <button class="btn btn-primary" @onmousedown="StartSpeaking">Hold to Talk</button>
</div>

<div>
    <label>Response</label>
    <p>@chatResponse</p>
</div>

<div>
    <p>@Status</p>
    <p>mime: @mimeType</p>
    <p>Bytes: @bytesRecorded</p>
</div>

<div>
    <h5>Input Devices</h5>
    <div>
        <button class="btn btn-primary" @onclick="RefreshDevices">Refresh Audio Input Devices</button>
    </div>
    <div>
        <InputSelect @bind-Value="selectedDeviceId">
            @foreach (var device in AudioInputDevices)
            {
                <option value="@device.DeviceId">@device.Label</option>
            }
        </InputSelect>
    </div>
</div>

<div>
    <p>Request: @request</p>
</div>

@code {
    private DotNetObjectReference<VoiceChat> thisJS = default!;
    private IJSObjectReference module = default!;
    private bool talkEnabled;
    private string? selectedDeviceId;
    private string Status => talkEnabled ? "Talking" : "Ready";
    private string? mimeType;
    private int bytesRecorded = 0;
    private string chatResponse = string.Empty;
    private List<BrowserMediaDevice> AudioInputDevices = new List<BrowserMediaDevice>();
    private string? request;
    private string voice = "s3://peregrine-voices/oliver_narrative2_parrot_saad/manifest.json";
    private List<VoiceReturn> voices = new List<VoiceReturn> { new() { id =
"s3://peregrine-voices/oliver_narrative2_parrot_saad/manifest.json", name = "Default" } };
    private BufferPosition bufferPosition = BufferPosition.First;
    private HubConnection? hub;
    private Channel<string> requestQueue = Channel.CreateUnbounded<string>();
    private Channel<byte[]> audioQueue = Channel.CreateUnbounded<byte[]>();
    private Task requestProcessor = null!;
    private bool playing;

    public Task ReceiveResult(RegularResult message)
    {
        request = message.text;
        StateHasChanged();
        requestQueue.Writer.TryWrite(message.text!);
        return Task.CompletedTask;
    }

    public Task ReceivePartialResult(PartialResult message)
    {
        request = message.partial;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ReceiveFinalResult(FinalResult message)
    {
        request = message.text;
        StateHasChanged();
        requestQueue.Writer.TryWrite(message.text);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task DataAvailable(byte[] buffer, string mimeType)
    {
        bytesRecorded += buffer.Length;
        StateHasChanged();
        if (hub is not null)
        {
            await hub.SendAsync("ProcessAudioBuffer", buffer, bufferPosition, mimeType);
        }

        if (bufferPosition == BufferPosition.First)
            bufferPosition = BufferPosition.Middle;
    }

    [JSInvokable]
    public void RecordingStopped()
    {
        talkEnabled = false;
        StateHasChanged();
    }

    [JSInvokable]
    public ValueTask<byte[]> Pop()
    {
        return audioQueue.Reader.ReadAsync();
    }

    public async ValueTask DisposeAsync()
    {
        requestQueue.Writer.TryComplete();
        await module.DisposeAsync();
        thisJS.Dispose();
        await requestProcessor;
    }

    protected override async Task OnInitializedAsync()
    {
        thisJS = DotNetObjectReference.Create(this);
        requestProcessor = ProcessRequest();
        await CheckConnection();
        voices = await GetVoices();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/app.js");
            await RefreshDevices();
            StateHasChanged();
        }
    }

    private async Task StartSpeaking()
    {
        if (!talkEnabled)
        {
            talkEnabled = true;
            bytesRecorded = 0;
            request = null;
            chatResponse = string.Empty;
            StateHasChanged();
            bufferPosition = BufferPosition.First;
            await CheckConnection();
            mimeType = await module.InvokeAsync<string>("startRecording", thisJS, selectedDeviceId);
            StateHasChanged();
        }

        if (!playing)
        {
            playing = true;
            await module.InvokeVoidAsync("startMediaSource", thisJS);
        }
    }

    [JSInvokable]
    public void EndSpeaking()
    {
        bufferPosition = BufferPosition.Last;
    }

    private async Task<List<VoiceReturn>> GetVoices()
    {
        var response = await Api.GetVoicesAsync();
        return response;
    }

    private async Task RefreshDevices()
    {
        if (await module.InvokeAsync<bool>("requestMicrophonePermission"))
        {
            var devices = await module.InvokeAsync<List<BrowserMediaDevice>>("getAudioInputDevices") ?? new();
            devices = devices.Where(device => !string.IsNullOrWhiteSpace(device.DeviceId)).ToList();
            AudioInputDevices = devices ?? new List<BrowserMediaDevice>();
            StateHasChanged();
        }
    }

    private bool DetectSentence(ref string sentence, out string leftOver)
    {
        if (sentence.Contains(".") || sentence.Contains("!") || sentence.Contains("?"))
        {
            var split = sentence.Split(new[] { '.', '!', '?' }, 2);
            sentence = split[0];
            leftOver = split[1] ?? string.Empty;
            return true;
        }

        leftOver = string.Empty;
        return false;
    }

    private async Task ProcessRequest()
    {
        await foreach (var request in requestQueue.Reader.ReadAllAsync())
        {
            var partials = Api.ChatStream(new ChatRequest() { Message = request });
            var sentence = string.Empty;
            await foreach (var partial in partials)
            {
                chatResponse += partial?.Message ?? string.Empty;
                StateHasChanged();
                sentence += partial?.Message ?? string.Empty;
                if (DetectSentence(ref sentence, out var leftOver))
                {
                    var ttsRequest = new TtsRequest
                        {
                            Params = new()
                            {
                                Text = { sentence },
                                Voice = voice,
                                Format = Format.Mp3,
                                Temperature = 1.3f,
                                Quality = Quality.Draft,
                                Speed = 1.0f
                            }
                        };

                    var response = client.Tts(ttsRequest);
                    await foreach (var item in response.ResponseStream.ReadAllAsync())
                    {
                        audioQueue.Writer.TryWrite(item.Data.ToByteArray());
                    }

                    sentence = leftOver;
                }
            }
        }
    }

    private async Task CheckConnection()
    {
        if (hub is null)
        {
            hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/speechtotext"))
            .Build();

            hub.On<RegularResult>("ReceiveResult", ReceiveResult);
            hub.On<PartialResult>("ReceivePartialResult", ReceivePartialResult);
            hub.On<FinalResult>("ReceiveFinalResult", ReceiveFinalResult);
        }

        if (hub.State != HubConnectionState.Connected)
            await hub.StartAsync();
    }
}
