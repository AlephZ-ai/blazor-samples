@using System.Text.Json
@using BlazorSamples.Shared
@page "/chat"
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@inject ApiClient Api
@inject LegacyApiClient LegacyApi

@if (engine == ChatEngine.OpenAI)
{
    <PageTitle>OpenAI</PageTitle>

    <h1>OpenAI</h1>
}
else if (engine == ChatEngine.SemanticKernel)
{
    <PageTitle>Semantic Kernel</PageTitle>

    <h1>Semantic Kernel</h1>
}
else if (engine == ChatEngine.TypeChat)
{
    <PageTitle>Type Chat</PageTitle>

    <h1>Type Chat</h1>
}
else if (engine == ChatEngine.KernelPlugins)
{
    <PageTitle>Kernel Plugins</PageTitle>

    <h1>Kernel Plugins</h1>
}
else if (engine == ChatEngine.TypeKernel)
{
    <PageTitle>Type Kernel</PageTitle>

    <h1>Type Kernel</h1>
}

<div>
    <InputRadioGroup @bind-Value="engine">
        <InputRadio Value="ChatEngine.OpenAI" /> OpenAI
        <br />

        <InputRadio Value="ChatEngine.SemanticKernel" /> Semantic Engine
        <br />

        <InputRadio Value="ChatEngine.TypeChat" /> Type Chat
        <br />

        <InputRadio Value="ChatEngine.KernelPlugins" /> Kernel Plugins
        <br />

        <InputRadio Value="ChatEngine.TypeKernel" /> Type Kernel
    </InputRadioGroup>
</div>

@if (response is not null)
{
    <div>
        <label>Response</label>
        <p>@response.Message</p>
    </div>
}

<p>Ask question</p>

<EditForm Enhance Model="request" OnSubmit="SubmitAsync">
    <div class="form-group">
        <label for="Message">Question</label>
        <InputTextArea id="Message" class="form-control" rows="3" @bind-Value="request.Message" />
    </div>

    <button type="submit" class="btn btn-primary">Send</button>
</EditForm>

@code {
    private ChatEngine engine = ChatEngine.OpenAI;

    private ChatRequest request = new() { Message = "I need to get my tires changed from 12:00 to 2:00 pm on Friday March 15, 2024" };
    private ChatResponse? response;

    private async Task SubmitAsync()
    {
        if (engine == ChatEngine.OpenAI)
        {
            response = await Api.ChatAsync(request);
        }
        else if (engine == ChatEngine.SemanticKernel)
        {
            response = await Api.KernelAsync(request);
        }
        else if (engine == ChatEngine.TypeChat)
        {
            var calendarActions = await Api.TypeChatAsync(request);
            response = new ChatResponse { Message =  JsonSerializer.Serialize(calendarActions) };
        }
        else if (engine == ChatEngine.KernelPlugins)
        {
            response = await Api.KernelPluginsAsync(request);
        }
        else if (engine == ChatEngine.TypeKernel)
        {
            response = await LegacyApi.TypeKernelAsync(request);
        }
    }
}
